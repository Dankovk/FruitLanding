/* Barebones Compass mixins
 *
 * Contains custom mixins in use within the project
 *
 * See individual mixins for more info
 */

/* Base diff mixin
 *
 * Redefines basic typography settings and background, but only if they differ
 * from base values
 *
 * Base values are defined in base/_variable.scss
 *
 * @uses $base-color
 * @uses $base-font-family
 * @uses $base-font-size
 * @uses $base-font-style
 * @uses $base-font-weight
 * @uses $base-line-height
 * @uses $base-background-color
 */
@mixin base-diff ($color: false, $font-family: false, $font-size: false, $font-style: false, $font-weight: false, $line-height: false, $background-color: false) {
    @if $color and $color != $base-color {
        color: $color;
    }

    @if $font-family and $font-family != $base-font-family {
        font-family: $font-family;
    }

    @if $font-size and $font-size != $base-font-size {
        font-size: $font-size;
    }

    @if $font-style and $font-style != $base-font-style {
        font-style: $font-style;
    }

    @if $font-weight and $font-weight != $base-font-weight {
        font-weight: $font-weight;
    }

    @if $line-height and $line-height != $base-line-height {
        line-height: $line-height;
    }

    @if $background-color and $background-color != $base-background-color {
        background-color: $background-color;
    }
}

/* Directional property mixin
 *
 * This mixin simplifies redefinition of directional properties (like padding).
 * If only some property values are passed, they are set individually. But if
 * all four values are passed, they are set using an optimal combination
 */
@mixin directional-property ($name, $top: false, $right: $top, $bottom: $top, $left: $right) {
    @if $top and $right and $bottom and $left {
        // All directions set
        @if $top == $right == $bottom == $left {
            // All directions same
            #{$name}: $top;
        } @else if $top == $bottom and $right == $left {
            // Margin groups differ
            #{$name}: $top $right;
        } @else if $right == $left {
            // Y directions differ
            #{$name}: $top $right $bottom;
        } @else {
            // All directions differ
            // X directions differ
            #{$name}: $top $right $bottom $left;
        }
    } @else {
        @if $top {
            #{$name}-top: $top;
        }

        @if $right {
            #{$name}-right: $right;
        }

        @if $bottom {
            #{$name}-bottom: $bottom;
        }

        @if $left {
            #{$name}-left: $left;
        }
    }
}

/* Layout margin mixin
 *
 * This is a shortcut to using the directional-property mixin with margin
 * property
 */
@mixin layout-margin ($top: false, $right: $top, $bottom: $top, $left: $right) {
    @include directional-property (margin, $top, $right, $bottom, $left);
}

/* Layout padding mixin
 *
 * This is a shortcut to using the directional-property mixin with padding
 * property
 */
@mixin layout-padding ($top: false, $right: $top, $bottom: $top, $left: $right) {
    @include directional-property (padding, $top, $right, $bottom, $left);
}

/* Selection mixin
 *
 * This mixin sets the text color and background color of selected elements
 */
@mixin selection ($color: false, $background: false) {
    ::selection {
        @if $color {
            color: $color;
        }

        @if $background {
            background: $background;
        }
    }

    ::-moz-selection {
        @if $color {
            color: $color;
        }

        @if $background {
            background: $background;
        }
    }
}



// Px to REM font-size: rem(36px, 16px);
@function rem($px, $base: $base-font-size) {
    @return ($px / $base) * 1rem;
}

// Px to EM font-size: em(36px);
@function em($px, $base: $base-font-size) {
    @return ($px / $base) * 1em;
}

// Vertical centering
@mixin vertical-center ($container) {
    &:before,
    > #{$container} {
        display: inline-block;
        vertical-align: middle;
    }

    &:before {
        content: '';
        margin-left: -0.25em;
        width: 0;
        height: 100%;
    }
}


// Placeholder mixin
//
// @include placeholder {color: #fff;}

// @mixin placeholder {
//     $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
//     @each $placeholder in $placeholders {
//         &:#{$placeholder}-placeholder {
//             @content;
//         }
//     }
// }


// All text inputs

@mixin textInputs {
    input[type="email"],
    input[type="number"],
    input[type="password"],
    input[type="search"],
    input[type="tel"],
    input[type="text"],
    input[type="url"] {
        @content;
    }
}


// List reset
//
// @extend %list-reset;

%list-reset {
    margin: 0;
    padding: 0;
    list-style-type: none;
}


// Clearfix
//
// @extend %clearfix;

%clearfix {
    &:after {
        content:"";
        display: table;
        clear: both;
    }
}


// Example media mixin
//
//  @include break(tablet) {width: 100%;}
@mixin break($point) {
    @if $point==tablet {
        @media all and (max-width: 1100px) and (min-width: 950px) {
            @content;
        }
    }
    @else if $point==mobile {
        @media all and (max-width: 949px) {
            @content;
        }
    }
    @else if $point==iphone {
        @media only screen and (min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) {
            @content;
        }
    }
}
